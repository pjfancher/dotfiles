"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug-in manager for Vim
Plugin 'gmarik/Vundle.vim'

" A tree explorer plugin for vim.
Plugin 'scrooloose/nerdtree.git'

" Vim plugin for intensely orgasmic commenting
Plugin 'scrooloose/nerdcommenter.git'

" Extended matching with %
Plugin 'jwhitley/vim-matchit'

" The ultimate snippet solution for Vim
Plugin 'garbas/vim-snipmate'

" Required libs for Snipmate
Plugin 'marcweber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'

" Quoting/parenthesizing made simple
Plugin 'tpope/vim-surround'

" a Git wrapper so awesome, it should be illegal 
Plugin 'tpope/vim-fugitive'

" True Sublime Text style multiple selections for Vim
Plugin 'terryma/vim-multiple-cursors'

" A light and configurable statusline/tabline
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'

" A light and configurable statusline/tabline for Vim
Plugin 'itchyny/lightline.vim'

" Insert mode auto-completion for quotes, parens, brackets, etc.
Plugin 'Raimondi/delimitMate'

" Text filtering and alignment
Plugin 'godlygeek/tabular'

" Full path fuzzy file, buffer, tag finder for Vim.
Plugin 'ctrlpvim/ctrlp.vim'

" Vim motions on speed!
Plugin 'easymotion/vim-easymotion'

" Vim Plugin for WordPress Development
Plugin 'dsawardekar/wordpress.vim'

" Improved PHP omnicompletion 
Plugin 'shawncplus/phpcomplete.vim'

" Syntax checking hacks for vim
Plugin 'scrooloose/syntastic.git'

" A solid language pack for Vim.
Plugin 'sheerun/vim-polyglot'

" Check PHP files for syntax errors
Plugin 'nrocco/vim-phplint'

" A Vim plugin which shows a git diff in the gutter
Plugin 'airblade/vim-gitgutter'

" Perform all your vim insert mode completions with Tab
Plugin 'ervandew/supertab'

" Custom vim movements for selecting variables in PHP and Ruby
Plugin 'robmiller/vim-movar'

" Simplifies the transition between multiline and single-line code"
Plugin 'AndrewRadev/splitjoin.vim'

" A better JSON for Vim
Plugin 'elzr/vim-json'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => PLUGIN CONFIGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NerdTree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto Open NERDTree when no file on command line
function! StartUp()
 if 0 == argc()
	 NERDTree
	 call feedkeys("\<C-W>l:q\<Enter>","t")
 end
endfunction
au VimEnter * call StartUp()
let NERDTreeShowLineNumbers=1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'


" Vimify NerdTree Tab Navigation
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <C-l> gt
nmap <C-h> gT


" CtrlP
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20,results:20'
let g:ctrlp_by_filename = 1
let g:ctrlp_open_new_file = 't'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](plugins|uploads|images|backups|cache|ewww|upgrade|w3tc-config)$',
  \ }
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }
nmap <Leader>re :CtrlPMRU<CR>


" EasyMotion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"EasyMotion Search
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

"Override s for EasyMotion Search
nmap s <Plug>(easymotion-overwin-f)

"Override w for EasyMotion Word Search
nmap w <Plug>(easymotion-w)

"Enable Smartcase
let g:EasyMotion_smartcase = 1


" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set laststatus=2
"let g:airline_powerline_fonts=1
"let g:airline_theme='bubblegum'
"let g:airline#extensions#whitespace#enabled = 0
"highlight clear SignColumn
"
"if 'pj-dev-1' != hostname()
"    let g:airline_theme='light'
"end
"
"
"function! AirlineInit() 
"  let g:airline_section_a = airline#section#create(['mode', ' ', 'paste'])
"  let g:airline_section_b = airline#section#create(['branch'])
"  let g:airline_section_c = airline#section#create(['hunks'])
"  let g:airline_section_x = airline#section#create(['%f'])
"  let g:airline_section_y = airline#section#create(['%{hostname()}'])
"  let g:airline_section_z = airline#section#create(['%p%% : %l/%L'])
"  call airline#update_statusline()
"endfunction
"autocmd VimEnter * call AirlineInit()


" Lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set noshowmode
set laststatus=2
let g:lightline = {
\ 'colorscheme': 'seoul256',
\ 'active': {
\   'left': [ [ 'mode', 'paste' ], [ 'fugitive' ], [ 'gitgutter' ] ],
\   'right': [ [ 'lineinfo' ], [ 'hostname' ], [ 'relativepath' ] ]
\ },
\ 'component_function': {
\   'fugitive': 'LightlineFugitive',
\   'gitgutter': 'LightlineGitGutter',
\   'hostname' : 'LightlineHostname'
\ },
\ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\ 'subseparator': { 'left': "", 'right': ":" }
\ }

let g:lightline.component = {
\ 'lineinfo': '%p%% : %l/%L' }

function LightlineHostname()
    return hostname()
endfunction

function! LightlineFugitive()
    return exists('*fugitive#head') ? printf( '%s%s', "\uE0A0 ", fugitive#head()) : ''
endfunction

function LightlineGitGutter() 
    let hunks = exists('*GitGutterGetHunkSummary') ? GitGutterGetHunkSummary() : ''
    let string = ''
    if !empty(hunks)
        for i in [0, 1, 2]
            if (hunks[i] > 0)
                if (i == 0)
                    let symbol = '+'
                elseif (i == 1)
                    let symbol = '~'
                elseif (i == 2)
                    let symbol = '-'
                endif
                let string .= printf('%s%s ', symbol, hunks[i])
            endif
        endfor
    endif
    if (string == '')
        return
    else
        return string
    endif
endfunction


" Snipmate
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
imap <Tab><Space> <Plug>snipMateNextOrTrigger


" Tabular
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vmap <Leader>aa :Tabularize /=><CR>
nmap <Leader>aa :Tabularize /=><CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a: :Tabularize /:<CR>


" Vim Fugitive
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <Leader>gs :Gstatus<CR>
nmap <Leader>gc :Gcommit<CR>
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gpm :!git push origin master<CR>
nmap <Leader>gplm :!git pull origin master<CR>


" Syntastic
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']


" Split/Join
" <Leader>S - split
" <Leader>J - join
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:splitjoin_split_mapping = '<Leader>S'
let g:splitjoin_join_mapping  = '<Leader>J'
